// Generated by CoffeeScript 2.5.1
var configure, flatten;

flatten = function(arr) {
  var i, j, ref, ret;
  ret = [];
  for (i = j = 0, ref = arr.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    if (Array.isArray(arr[i])) {
      ret.push(...flatten(arr[i]));
    } else {
      ret.push(arr[i]);
    }
  }
  return ret;
};

configure = function(...configs) {
  var base, config, handle_callback, handle_promise, i, j, len, they, to_args;
  configs = flatten(configs);
  for (i = j = 0, len = configs.length; j < len; i = ++j) {
    config = configs[i];
    if (config == null) {
      configs[i] = config = {};
    }
    if ((base = configs[i]).label == null) {
      base.label = `${i}`;
    }
  }
  // Promise implementation
  handle_promise = function(handler, context, args) {
    return handler.apply(context, args);
  };
  // Callback implementation
  handle_callback = function(handler, context, args) {
    handler.apply(context, args);
    return null;
  };
  to_args = function(msg, handler, context, config) {
    return [
      `${msg} (${config.label})`,
      [0,
      1].includes(handler.length) ? function() {
        return handler.call(this,
      config);
      } : function(next) {
        handler.call(this,
      config,
      next);
        return null;
      }
    ];
  };
  // Define our main entry point
  they = function(msg, handler) {
    return configs.map(function(config) {
      return it.apply(null, to_args(msg, handler, context, config));
    });
  };
  they.only = function(msg, handler) {
    return configs.map(function(config) {
      return it.only.apply(null, to_args(msg, handler, context, config));
    });
  };
  they.skip = function(msg, handler) {
    return configs.map(function(config) {
      return it.skip.apply(null, to_args(msg, handler, context, config));
    });
  };
  // Return the final result
  return they;
};

module.exports = function(...configs) {
  return configure(...configs);
};
