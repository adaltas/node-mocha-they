// Generated by CoffeeScript 2.5.1
var configure, flatten;

flatten = function(arr) {
  var i, j, ref, ret;
  ret = [];
  for (i = j = 0, ref = arr.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
    if (Array.isArray(arr[i])) {
      ret.push(...flatten(arr[i]));
    } else {
      ret.push(arr[i]);
    }
  }
  return ret;
};

configure = function(...configs) {
  var base, config, handle_callback, handle_promise, i, j, len, they;
  configs = flatten(configs);
  for (i = j = 0, len = configs.length; j < len; i = ++j) {
    config = configs[i];
    if (config == null) {
      configs[i] = config = {};
    }
    if ((base = configs[i]).label == null) {
      base.label = `${i}`;
    }
  }
  // Local execution for promises
  handle_promise = function(context, config, handler) {
    return handler.call(context, config);
  };
  // Remote execution for promises
  // Local execution for callbacks
  handle_callback = function(context, config, handler, next) {
    handler.call(context, config, next);
    return null;
  };
  // Define our main entry point
  they = function(msg, handler) {
    var k, l, len1, len2, results, results1;
    if ([0, 1].includes(handler.length)) {
      results = [];
      for (k = 0, len1 = configs.length; k < len1; k++) {
        config = configs[k];
        results.push((function(config) {
          return it(`${msg} (${config.label})`, function() {
            return handle_promise(this, config, handler);
          });
        })(config));
      }
      return results;
    } else {
      results1 = [];
      for (l = 0, len2 = configs.length; l < len2; l++) {
        config = configs[l];
        results1.push((function(config) {
          return it(`${msg} (${config.label})`, function(next) {
            return handle_callback(this, config, handler, next);
          });
        })(config));
      }
      return results1;
    }
  };
  they.only = function(msg, handler) {
    var k, l, len1, len2, results, results1;
    if ([0, 1].includes(handler.length)) {
      results = [];
      for (k = 0, len1 = configs.length; k < len1; k++) {
        config = configs[k];
        results.push((function(config) {
          return it.only(`${msg} (${config.label})`, function() {
            return handle_promise(this, config, handler);
          });
        })(config));
      }
      return results;
    } else {
      results1 = [];
      for (l = 0, len2 = configs.length; l < len2; l++) {
        config = configs[l];
        results1.push((function(config) {
          return it.only(`${msg} (${config.label})`, function(next) {
            return handle_callback(this, config, handler, next);
          });
        })(config));
      }
      return results1;
    }
  };
  they.skip = function(msg, handler) {
    var k, l, len1, len2, results, results1;
    if ([0, 1].includes(handler.length)) {
      results = [];
      for (k = 0, len1 = configs.length; k < len1; k++) {
        config = configs[k];
        results.push((function(config) {
          return it.skip(`${msg} (${config.label})`, function() {
            return handle_promise(this, config, handler);
          });
        })(config));
      }
      return results;
    } else {
      results1 = [];
      for (l = 0, len2 = configs.length; l < len2; l++) {
        config = configs[l];
        results1.push((function(config) {
          return it.skip(`${msg} (${config.label})`, function(next) {
            return handle_callback(this, config, handler, next);
          });
        })(config));
      }
      return results1;
    }
  };
  // Return the final result
  return they;
};

module.exports = configure();

module.exports.configure = function(...configs) {
  return configure(...configs);
};
