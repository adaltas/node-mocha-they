// Generated by CoffeeScript 1.7.1
var connect, they;

connect = require('ssh2-connect');

they = function(msg, callback) {
  it("" + msg + " (local)", function(next) {
    return callback.call(this, null, next);
  });
  return it("" + msg + " (remote)", function(next) {
    return connect({
      host: 'localhost'
    }, (function(_this) {
      return function(err, ssh) {
        if (err) {
          return next(err);
        }
        return callback.call(_this, ssh, next);
      };
    })(this));
  });
};

they.only = function(mode, msg, callback) {
  var local, remote;
  if (arguments.length === 2) {
    callback = msg;
    msg = mode;
    mode = null;
  }
  local = function() {
    return it.only("" + msg + " (local)", function(next) {
      return callback.call(this, null, next);
    });
  };
  remote = function() {
    return it.only("" + msg + " (remote)", function(next) {
      return connect({
        host: 'localhost'
      }, (function(_this) {
        return function(err, ssh) {
          return callback.call(_this, ssh, next);
        };
      })(this));
    });
  };
  if (mode) {
    switch (mode) {
      case 'local':
        return local();
      case 'remote':
        return remote();
      default:
        throw new Error("Invalid test mode " + mode);
    }
  } else {
    local();
    return remote();
  }
};

they.skip = function(mode, msg, callback) {
  var local, remote;
  if (arguments.length === 2) {
    callback = msg;
    msg = mode;
    mode = null;
  }
  local = function() {
    return it.skip("" + msg + " (local)", function(next) {
      return callback.call(this, null, next);
    });
  };
  remote = function() {
    return it.skip("" + msg + " (remote)", function(next) {
      return connect({
        host: 'localhost'
      }, (function(_this) {
        return function(err, ssh) {
          return callback.call(_this, ssh, next);
        };
      })(this));
    });
  };
  if (mode) {
    switch (mode) {
      case 'local':
        return local();
      case 'remote':
        return remote();
      default:
        throw new Error("Invalid test mode " + mode);
    }
  } else {
    local();
    return remote();
  }
};

module.exports = they;
