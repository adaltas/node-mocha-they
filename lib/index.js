// Generated by CoffeeScript 1.12.3
var callback_local, callback_remote, connect, promise_local, promise_remote, they;

connect = require('ssh2-connect');

promise_local = function(context, callback) {
  return callback.call(context, null);
};

promise_remote = function(context, callback) {
  return new Promise(function(resolve, reject) {
    return connect({
      host: 'localhost'
    }, function(err, ssh) {
      var close, p;
      close = function(callback) {
        var open, ref, ref1;
        open = ((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0);
        if (!open) {
          return callback();
        }
        ssh.end();
        return ssh.on('end', function() {
          return process.nextTick(function() {
            return callback();
          });
        });
      };
      if (err) {
        return next(err);
      }
      p = callback.call(context, ssh, function(err) {});
      return p.then(function() {
        return close(function() {
          return resolve();
        });
      }, function(err) {
        return close(function() {
          return reject(err);
        });
      });
    });
  });
};

callback_local = function(context, callback, next) {
  callback.call(context, null, next);
  return null;
};

callback_remote = function(context, callback, next) {
  return connect({
    host: 'localhost'
  }, function(err, ssh) {
    if (err) {
      return next(err);
    }
    return callback.call(context, ssh, function(err) {
      var open, ref, ref1;
      open = ((ref = ssh._sshstream) != null ? ref.writable : void 0) && ((ref1 = ssh._sock) != null ? ref1.writable : void 0);
      if (!open) {
        return next();
      }
      ssh.end();
      return ssh.on('end', function() {
        return process.nextTick(function() {
          return next(err);
        });
      });
    });
  });
};

they = function(msg, callback) {
  if (callback.length === 1) {
    it(msg + " (local)", function() {
      return promise_local(this, callback);
    });
    return it(msg + " (remote)", function() {
      return promise_remote(this, callback);
    });
  } else {
    it(msg + " (local)", function(next) {
      return callback_local(this, callback, next);
    });
    return it(msg + " (remote)", function(next) {
      return callback_remote(this, callback, next);
    });
  }
};

they.only = function(msg, callback) {
  if (callback.length === 1) {
    it.only(msg + " (local)", function() {
      return promise_local(this, callback);
    });
    return it.only(msg + " (remote)", function() {
      return promise_remote(this, callback);
    });
  } else {
    it.only(msg + " (local)", function(next) {
      return callback_local(this, callback, next);
    });
    return it.only(msg + " (remote)", function(next) {
      return callback_remote(this, callback, next);
    });
  }
};

they.skip = function(msg, callback) {
  if (callback.length === 1) {
    it.skip(msg + " (local)", function() {
      return promise_local(this, callback);
    });
    return it.skip(msg + " (remote)", function() {
      return promise_remote(this, callback);
    });
  } else {
    it.skip(msg + " (local)", function(next) {
      return callback_local(this, callback, next);
    });
    return it.skip(msg + " (remote)", function(next) {
      return callback_remote(this, callback, next);
    });
  }
};

module.exports = they;
